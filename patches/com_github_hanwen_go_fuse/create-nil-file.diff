diff --git fuse/nodefs/api.go fuse/nodefs/api.go
index 32fa8c7..cf9a314 100644
--- fuse/nodefs/api.go
+++ fuse/nodefs/api.go
@@ -86,6 +86,8 @@ type Node interface {
 	Link(name string, existing Node, context *fuse.Context) (newNode *Inode, code fuse.Status)
 
 	// Create should return an open file, and the Inode for that file.
+	// It is OK to return a nil file here. In that case, the Node should
+	// implement Read or Write directly.
 	Create(name string, flags uint32, mode uint32, context *fuse.Context) (file File, child *Inode, code fuse.Status)
 
 	// Open opens a file, and returns a File which is associated
diff --git fuse/nodefs/fsops.go fuse/nodefs/fsops.go
index ff1e57b..a8f6f40 100644
--- fuse/nodefs/fsops.go
+++ fuse/nodefs/fsops.go
@@ -185,12 +185,14 @@ func (c *rawBridge) ReadDirPlus(input *fuse.ReadIn, out *fuse.DirEntryList) fuse
 func (c *rawBridge) Open(input *fuse.OpenIn, out *fuse.OpenOut) (status fuse.Status) {
 	node := c.toInode(input.NodeId)
 	f, code := node.fsInode.Open(input.Flags, &input.Context)
-	if !code.Ok() || f == nil {
+	if !code.Ok() {
 		return code
 	}
-	h, opened := node.mount.registerFileHandle(node, nil, f, input.Flags)
-	out.OpenFlags = opened.FuseFlags
-	out.Fh = h
+	if f != nil {
+		h, opened := node.mount.registerFileHandle(node, nil, f, input.Flags)
+		out.OpenFlags = opened.FuseFlags
+		out.Fh = h
+	}
 	return fuse.OK
 }
 
@@ -199,8 +201,9 @@ func (c *rawBridge) SetAttr(input *fuse.SetAttrIn, out *fuse.AttrOut) (code fuse
 
 	var f File
 	if input.Valid&fuse.FATTR_FH != 0 {
-		opened := node.mount.getOpenedFile(input.Fh)
-		f = opened.WithFlags.File
+		if opened := node.mount.getOpenedFile(input.Fh); opened != nil {
+			f = opened.WithFlags.File
+		}
 	}
 
 	if code.Ok() && input.Valid&fuse.FATTR_MODE != 0 {
@@ -363,13 +366,13 @@ func (c *rawBridge) Create(input *fuse.CreateIn, name string, out *fuse.CreateOu
 	if !code.Ok() {
 		return code
 	}
-
 	c.childLookup(&out.EntryOut, child, &input.Context)
-	handle, opened := parent.mount.registerFileHandle(child, nil, f, input.Flags)
-
-	out.OpenOut.OpenFlags = opened.FuseFlags
-	out.OpenOut.Fh = handle
-	return code
+	if f != nil {
+		h, opened := parent.mount.registerFileHandle(child, nil, f, input.Flags)
+		out.OpenOut.OpenFlags = opened.FuseFlags
+		out.OpenOut.Fh = h
+	}
+	return fuse.OK
 }
 
 func (c *rawBridge) Release(input *fuse.ReleaseIn) {
